// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: riak_search.proto

package com.basho.riak.protobuf

//import "riak.proto"

final case class RpbSearchDoc(
  `fields`: scala.collection.immutable.Seq[com.basho.riak.protobuf.RpbPair] = Vector.empty[com.basho.riak.protobuf.RpbPair]) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbSearchDoc]
    with net.sandrogrzicic.scalabuff.Parser[RpbSearchDoc] {

  def setFields(_i: Int, _v: com.basho.riak.protobuf.RpbPair) = copy(`fields` = `fields`.updated(_i, _v))
  def addFields(_f: com.basho.riak.protobuf.RpbPair) = copy(`fields` = `fields` :+ _f)
  def addAllFields(_f: com.basho.riak.protobuf.RpbPair*) = copy(`fields` = `fields` ++ _f)
  def addAllFields(_f: TraversableOnce[com.basho.riak.protobuf.RpbPair]) = copy(`fields` = `fields` ++ _f)

  def clearFields = copy(`fields` = Vector.empty[com.basho.riak.protobuf.RpbPair])

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    for (_v ← `fields`) output.writeMessage(1, _v)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    for (_v ← `fields`) __size += computeMessageSize(1, _v)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbSearchDoc = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    val __fields: scala.collection.mutable.Buffer[com.basho.riak.protobuf.RpbPair] = `fields`.toBuffer

      def __newMerged = RpbSearchDoc(
        Vector(__fields: _*))
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __fields += readMessage[com.basho.riak.protobuf.RpbPair](in, com.basho.riak.protobuf.RpbPair.defaultInstance, _emptyRegistry)
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbSearchDoc) = {
    RpbSearchDoc(
      `fields` ++ m.`fields`)
  }

  def getDefaultInstanceForType = RpbSearchDoc.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbSearchDoc {
  @beans.BeanProperty val defaultInstance = new RpbSearchDoc()

  def parseFrom(data: Array[Byte]): RpbSearchDoc = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbSearchDoc = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbSearchDoc = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbSearchDoc = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbSearchDoc] = defaultInstance.mergeDelimitedFromStream(stream)

  val FIELDS_FIELD_NUMBER = 1

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbSearchDoc) = defaultInstance.mergeFrom(prototype)

}
final case class RpbSearchQueryReq(
  `q`: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY,
  `index`: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY,
  `rows`: Option[Int] = None,
  `start`: Option[Int] = None,
  `sort`: Option[com.google.protobuf.ByteString] = None,
  `filter`: Option[com.google.protobuf.ByteString] = None,
  `df`: Option[com.google.protobuf.ByteString] = None,
  `op`: Option[com.google.protobuf.ByteString] = None,
  `fl`: scala.collection.immutable.Seq[com.google.protobuf.ByteString] = Vector.empty[com.google.protobuf.ByteString],
  `presort`: Option[com.google.protobuf.ByteString] = None) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbSearchQueryReq]
    with net.sandrogrzicic.scalabuff.Parser[RpbSearchQueryReq] {

  def setRows(_f: Int) = copy(`rows` = Some(_f))
  def setStart(_f: Int) = copy(`start` = Some(_f))
  def setSort(_f: com.google.protobuf.ByteString) = copy(`sort` = Some(_f))
  def setFilter(_f: com.google.protobuf.ByteString) = copy(`filter` = Some(_f))
  def setDf(_f: com.google.protobuf.ByteString) = copy(`df` = Some(_f))
  def setOp(_f: com.google.protobuf.ByteString) = copy(`op` = Some(_f))
  def setFl(_i: Int, _v: com.google.protobuf.ByteString) = copy(`fl` = `fl`.updated(_i, _v))
  def addFl(_f: com.google.protobuf.ByteString) = copy(`fl` = `fl` :+ _f)
  def addAllFl(_f: com.google.protobuf.ByteString*) = copy(`fl` = `fl` ++ _f)
  def addAllFl(_f: TraversableOnce[com.google.protobuf.ByteString]) = copy(`fl` = `fl` ++ _f)
  def setPresort(_f: com.google.protobuf.ByteString) = copy(`presort` = Some(_f))

  def clearRows = copy(`rows` = None)
  def clearStart = copy(`start` = None)
  def clearSort = copy(`sort` = None)
  def clearFilter = copy(`filter` = None)
  def clearDf = copy(`df` = None)
  def clearOp = copy(`op` = None)
  def clearFl = copy(`fl` = Vector.empty[com.google.protobuf.ByteString])
  def clearPresort = copy(`presort` = None)

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeBytes(1, `q`)
    output.writeBytes(2, `index`)
    if (`rows`.isDefined) output.writeUInt32(3, `rows`.get)
    if (`start`.isDefined) output.writeUInt32(4, `start`.get)
    if (`sort`.isDefined) output.writeBytes(5, `sort`.get)
    if (`filter`.isDefined) output.writeBytes(6, `filter`.get)
    if (`df`.isDefined) output.writeBytes(7, `df`.get)
    if (`op`.isDefined) output.writeBytes(8, `op`.get)
    for (_v ← `fl`) output.writeBytes(9, _v)
    if (`presort`.isDefined) output.writeBytes(10, `presort`.get)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    __size += computeBytesSize(1, `q`)
    __size += computeBytesSize(2, `index`)
    if (`rows`.isDefined) __size += computeUInt32Size(3, `rows`.get)
    if (`start`.isDefined) __size += computeUInt32Size(4, `start`.get)
    if (`sort`.isDefined) __size += computeBytesSize(5, `sort`.get)
    if (`filter`.isDefined) __size += computeBytesSize(6, `filter`.get)
    if (`df`.isDefined) __size += computeBytesSize(7, `df`.get)
    if (`op`.isDefined) __size += computeBytesSize(8, `op`.get)
    for (_v ← `fl`) __size += computeBytesSize(9, _v)
    if (`presort`.isDefined) __size += computeBytesSize(10, `presort`.get)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbSearchQueryReq = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    var __q: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY
    var __index: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY
    var __rows: Option[Int] = `rows`
    var __start: Option[Int] = `start`
    var __sort: Option[com.google.protobuf.ByteString] = `sort`
    var __filter: Option[com.google.protobuf.ByteString] = `filter`
    var __df: Option[com.google.protobuf.ByteString] = `df`
    var __op: Option[com.google.protobuf.ByteString] = `op`
    val __fl: scala.collection.mutable.Buffer[com.google.protobuf.ByteString] = `fl`.toBuffer
    var __presort: Option[com.google.protobuf.ByteString] = `presort`

      def __newMerged = RpbSearchQueryReq(
        __q,
        __index,
        __rows,
        __start,
        __sort,
        __filter,
        __df,
        __op,
        Vector(__fl: _*),
        __presort)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __q = in.readBytes()
      case 18      ⇒ __index = in.readBytes()
      case 24      ⇒ __rows = Some(in.readUInt32())
      case 32      ⇒ __start = Some(in.readUInt32())
      case 42      ⇒ __sort = Some(in.readBytes())
      case 50      ⇒ __filter = Some(in.readBytes())
      case 58      ⇒ __df = Some(in.readBytes())
      case 66      ⇒ __op = Some(in.readBytes())
      case 74      ⇒ __fl += in.readBytes()
      case 82      ⇒ __presort = Some(in.readBytes())
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbSearchQueryReq) = {
    RpbSearchQueryReq(
      m.`q`,
      m.`index`,
      m.`rows`.orElse(`rows`),
      m.`start`.orElse(`start`),
      m.`sort`.orElse(`sort`),
      m.`filter`.orElse(`filter`),
      m.`df`.orElse(`df`),
      m.`op`.orElse(`op`),
      `fl` ++ m.`fl`,
      m.`presort`.orElse(`presort`))
  }

  def getDefaultInstanceForType = RpbSearchQueryReq.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbSearchQueryReq {
  @beans.BeanProperty val defaultInstance = new RpbSearchQueryReq()

  def parseFrom(data: Array[Byte]): RpbSearchQueryReq = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbSearchQueryReq = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbSearchQueryReq = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbSearchQueryReq = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbSearchQueryReq] = defaultInstance.mergeDelimitedFromStream(stream)

  val Q_FIELD_NUMBER = 1
  val INDEX_FIELD_NUMBER = 2
  val ROWS_FIELD_NUMBER = 3
  val START_FIELD_NUMBER = 4
  val SORT_FIELD_NUMBER = 5
  val FILTER_FIELD_NUMBER = 6
  val DF_FIELD_NUMBER = 7
  val OP_FIELD_NUMBER = 8
  val FL_FIELD_NUMBER = 9
  val PRESORT_FIELD_NUMBER = 10

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbSearchQueryReq) = defaultInstance.mergeFrom(prototype)

}
final case class RpbSearchQueryResp(
  `docs`: scala.collection.immutable.Seq[RpbSearchDoc] = Vector.empty[RpbSearchDoc],
  `maxScore`: Option[Float] = None,
  `numFound`: Option[Int] = None) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbSearchQueryResp]
    with net.sandrogrzicic.scalabuff.Parser[RpbSearchQueryResp] {

  def setDocs(_i: Int, _v: RpbSearchDoc) = copy(`docs` = `docs`.updated(_i, _v))
  def addDocs(_f: RpbSearchDoc) = copy(`docs` = `docs` :+ _f)
  def addAllDocs(_f: RpbSearchDoc*) = copy(`docs` = `docs` ++ _f)
  def addAllDocs(_f: TraversableOnce[RpbSearchDoc]) = copy(`docs` = `docs` ++ _f)
  def setMaxScore(_f: Float) = copy(`maxScore` = Some(_f))
  def setNumFound(_f: Int) = copy(`numFound` = Some(_f))

  def clearDocs = copy(`docs` = Vector.empty[RpbSearchDoc])
  def clearMaxScore = copy(`maxScore` = None)
  def clearNumFound = copy(`numFound` = None)

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    for (_v ← `docs`) output.writeMessage(1, _v)
    if (`maxScore`.isDefined) output.writeFloat(2, `maxScore`.get)
    if (`numFound`.isDefined) output.writeUInt32(3, `numFound`.get)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    for (_v ← `docs`) __size += computeMessageSize(1, _v)
    if (`maxScore`.isDefined) __size += computeFloatSize(2, `maxScore`.get)
    if (`numFound`.isDefined) __size += computeUInt32Size(3, `numFound`.get)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbSearchQueryResp = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    val __docs: scala.collection.mutable.Buffer[RpbSearchDoc] = `docs`.toBuffer
    var __maxScore: Option[Float] = `maxScore`
    var __numFound: Option[Int] = `numFound`

      def __newMerged = RpbSearchQueryResp(
        Vector(__docs: _*),
        __maxScore,
        __numFound)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __docs += readMessage[RpbSearchDoc](in, RpbSearchDoc.defaultInstance, _emptyRegistry)
      case 21      ⇒ __maxScore = Some(in.readFloat())
      case 24      ⇒ __numFound = Some(in.readUInt32())
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbSearchQueryResp) = {
    RpbSearchQueryResp(
      `docs` ++ m.`docs`,
      m.`maxScore`.orElse(`maxScore`),
      m.`numFound`.orElse(`numFound`))
  }

  def getDefaultInstanceForType = RpbSearchQueryResp.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbSearchQueryResp {
  @beans.BeanProperty val defaultInstance = new RpbSearchQueryResp()

  def parseFrom(data: Array[Byte]): RpbSearchQueryResp = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbSearchQueryResp = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbSearchQueryResp = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbSearchQueryResp = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbSearchQueryResp] = defaultInstance.mergeDelimitedFromStream(stream)

  val DOCS_FIELD_NUMBER = 1
  val MAX_SCORE_FIELD_NUMBER = 2
  val NUM_FOUND_FIELD_NUMBER = 3

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbSearchQueryResp) = defaultInstance.mergeFrom(prototype)

}

object RiakSearchPB {
  def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
  }

}
