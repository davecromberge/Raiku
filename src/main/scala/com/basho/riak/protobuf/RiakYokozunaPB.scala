// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: riak_yokozuna.proto

package com.basho.riak.protobuf

final case class RpbYokozunaIndex(
  `name`: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY,
  `schema`: Option[com.google.protobuf.ByteString] = None,
  `nVal`: Option[Int] = None) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbYokozunaIndex]
    with net.sandrogrzicic.scalabuff.Parser[RpbYokozunaIndex] {

  def setSchema(_f: com.google.protobuf.ByteString) = copy(`schema` = Some(_f))
  def setNVal(_f: Int) = copy(`nVal` = Some(_f))

  def clearSchema = copy(`schema` = None)
  def clearNVal = copy(`nVal` = None)

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeBytes(1, `name`)
    if (`schema`.isDefined) output.writeBytes(2, `schema`.get)
    if (`nVal`.isDefined) output.writeUInt32(3, `nVal`.get)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    __size += computeBytesSize(1, `name`)
    if (`schema`.isDefined) __size += computeBytesSize(2, `schema`.get)
    if (`nVal`.isDefined) __size += computeUInt32Size(3, `nVal`.get)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbYokozunaIndex = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    var __name: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY
    var __schema: Option[com.google.protobuf.ByteString] = `schema`
    var __nVal: Option[Int] = `nVal`

      def __newMerged = RpbYokozunaIndex(
        __name,
        __schema,
        __nVal)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __name = in.readBytes()
      case 18      ⇒ __schema = Some(in.readBytes())
      case 24      ⇒ __nVal = Some(in.readUInt32())
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbYokozunaIndex) = {
    RpbYokozunaIndex(
      m.`name`,
      m.`schema`.orElse(`schema`),
      m.`nVal`.orElse(`nVal`))
  }

  def getDefaultInstanceForType = RpbYokozunaIndex.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbYokozunaIndex {
  @beans.BeanProperty val defaultInstance = new RpbYokozunaIndex()

  def parseFrom(data: Array[Byte]): RpbYokozunaIndex = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbYokozunaIndex = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbYokozunaIndex = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbYokozunaIndex = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbYokozunaIndex] = defaultInstance.mergeDelimitedFromStream(stream)

  val NAME_FIELD_NUMBER = 1
  val SCHEMA_FIELD_NUMBER = 2
  val N_VAL_FIELD_NUMBER = 3

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbYokozunaIndex) = defaultInstance.mergeFrom(prototype)

}
final case class RpbYokozunaIndexGetReq(
  `name`: Option[com.google.protobuf.ByteString] = None) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbYokozunaIndexGetReq]
    with net.sandrogrzicic.scalabuff.Parser[RpbYokozunaIndexGetReq] {

  def setName(_f: com.google.protobuf.ByteString) = copy(`name` = Some(_f))

  def clearName = copy(`name` = None)

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    if (`name`.isDefined) output.writeBytes(1, `name`.get)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    if (`name`.isDefined) __size += computeBytesSize(1, `name`.get)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbYokozunaIndexGetReq = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    var __name: Option[com.google.protobuf.ByteString] = `name`

      def __newMerged = RpbYokozunaIndexGetReq(
        __name)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __name = Some(in.readBytes())
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbYokozunaIndexGetReq) = {
    RpbYokozunaIndexGetReq(
      m.`name`.orElse(`name`))
  }

  def getDefaultInstanceForType = RpbYokozunaIndexGetReq.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbYokozunaIndexGetReq {
  @beans.BeanProperty val defaultInstance = new RpbYokozunaIndexGetReq()

  def parseFrom(data: Array[Byte]): RpbYokozunaIndexGetReq = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbYokozunaIndexGetReq = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbYokozunaIndexGetReq = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbYokozunaIndexGetReq = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbYokozunaIndexGetReq] = defaultInstance.mergeDelimitedFromStream(stream)

  val NAME_FIELD_NUMBER = 1

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbYokozunaIndexGetReq) = defaultInstance.mergeFrom(prototype)

}
final case class RpbYokozunaIndexGetResp(
  `index`: scala.collection.immutable.Seq[RpbYokozunaIndex] = Vector.empty[RpbYokozunaIndex]) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbYokozunaIndexGetResp]
    with net.sandrogrzicic.scalabuff.Parser[RpbYokozunaIndexGetResp] {

  def setIndex(_i: Int, _v: RpbYokozunaIndex) = copy(`index` = `index`.updated(_i, _v))
  def addIndex(_f: RpbYokozunaIndex) = copy(`index` = `index` :+ _f)
  def addAllIndex(_f: RpbYokozunaIndex*) = copy(`index` = `index` ++ _f)
  def addAllIndex(_f: TraversableOnce[RpbYokozunaIndex]) = copy(`index` = `index` ++ _f)

  def clearIndex = copy(`index` = Vector.empty[RpbYokozunaIndex])

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    for (_v ← `index`) output.writeMessage(1, _v)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    for (_v ← `index`) __size += computeMessageSize(1, _v)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbYokozunaIndexGetResp = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    val __index: scala.collection.mutable.Buffer[RpbYokozunaIndex] = `index`.toBuffer

      def __newMerged = RpbYokozunaIndexGetResp(
        Vector(__index: _*))
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __index += readMessage[RpbYokozunaIndex](in, RpbYokozunaIndex.defaultInstance, _emptyRegistry)
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbYokozunaIndexGetResp) = {
    RpbYokozunaIndexGetResp(
      `index` ++ m.`index`)
  }

  def getDefaultInstanceForType = RpbYokozunaIndexGetResp.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbYokozunaIndexGetResp {
  @beans.BeanProperty val defaultInstance = new RpbYokozunaIndexGetResp()

  def parseFrom(data: Array[Byte]): RpbYokozunaIndexGetResp = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbYokozunaIndexGetResp = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbYokozunaIndexGetResp = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbYokozunaIndexGetResp = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbYokozunaIndexGetResp] = defaultInstance.mergeDelimitedFromStream(stream)

  val INDEX_FIELD_NUMBER = 1

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbYokozunaIndexGetResp) = defaultInstance.mergeFrom(prototype)

}
final case class RpbYokozunaIndexPutReq(
  `index`: RpbYokozunaIndex = RpbYokozunaIndex.defaultInstance) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbYokozunaIndexPutReq]
    with net.sandrogrzicic.scalabuff.Parser[RpbYokozunaIndexPutReq] {

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeMessage(1, `index`)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    __size += computeMessageSize(1, `index`)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbYokozunaIndexPutReq = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    var __index: RpbYokozunaIndex = RpbYokozunaIndex.defaultInstance

      def __newMerged = RpbYokozunaIndexPutReq(
        __index)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __index = readMessage[RpbYokozunaIndex](in, __index, _emptyRegistry)
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbYokozunaIndexPutReq) = {
    RpbYokozunaIndexPutReq(
      m.`index`)
  }

  def getDefaultInstanceForType = RpbYokozunaIndexPutReq.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbYokozunaIndexPutReq {
  @beans.BeanProperty val defaultInstance = new RpbYokozunaIndexPutReq()

  def parseFrom(data: Array[Byte]): RpbYokozunaIndexPutReq = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbYokozunaIndexPutReq = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbYokozunaIndexPutReq = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbYokozunaIndexPutReq = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbYokozunaIndexPutReq] = defaultInstance.mergeDelimitedFromStream(stream)

  val INDEX_FIELD_NUMBER = 1

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbYokozunaIndexPutReq) = defaultInstance.mergeFrom(prototype)

}
final case class RpbYokozunaIndexDeleteReq(
  `name`: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbYokozunaIndexDeleteReq]
    with net.sandrogrzicic.scalabuff.Parser[RpbYokozunaIndexDeleteReq] {

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeBytes(1, `name`)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    __size += computeBytesSize(1, `name`)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbYokozunaIndexDeleteReq = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    var __name: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY

      def __newMerged = RpbYokozunaIndexDeleteReq(
        __name)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __name = in.readBytes()
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbYokozunaIndexDeleteReq) = {
    RpbYokozunaIndexDeleteReq(
      m.`name`)
  }

  def getDefaultInstanceForType = RpbYokozunaIndexDeleteReq.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbYokozunaIndexDeleteReq {
  @beans.BeanProperty val defaultInstance = new RpbYokozunaIndexDeleteReq()

  def parseFrom(data: Array[Byte]): RpbYokozunaIndexDeleteReq = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbYokozunaIndexDeleteReq = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbYokozunaIndexDeleteReq = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbYokozunaIndexDeleteReq = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbYokozunaIndexDeleteReq] = defaultInstance.mergeDelimitedFromStream(stream)

  val NAME_FIELD_NUMBER = 1

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbYokozunaIndexDeleteReq) = defaultInstance.mergeFrom(prototype)

}
final case class RpbYokozunaSchema(
  `name`: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY,
  `content`: Option[com.google.protobuf.ByteString] = None) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbYokozunaSchema]
    with net.sandrogrzicic.scalabuff.Parser[RpbYokozunaSchema] {

  def setContent(_f: com.google.protobuf.ByteString) = copy(`content` = Some(_f))

  def clearContent = copy(`content` = None)

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeBytes(1, `name`)
    if (`content`.isDefined) output.writeBytes(2, `content`.get)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    __size += computeBytesSize(1, `name`)
    if (`content`.isDefined) __size += computeBytesSize(2, `content`.get)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbYokozunaSchema = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    var __name: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY
    var __content: Option[com.google.protobuf.ByteString] = `content`

      def __newMerged = RpbYokozunaSchema(
        __name,
        __content)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __name = in.readBytes()
      case 18      ⇒ __content = Some(in.readBytes())
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbYokozunaSchema) = {
    RpbYokozunaSchema(
      m.`name`,
      m.`content`.orElse(`content`))
  }

  def getDefaultInstanceForType = RpbYokozunaSchema.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbYokozunaSchema {
  @beans.BeanProperty val defaultInstance = new RpbYokozunaSchema()

  def parseFrom(data: Array[Byte]): RpbYokozunaSchema = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbYokozunaSchema = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbYokozunaSchema = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbYokozunaSchema = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbYokozunaSchema] = defaultInstance.mergeDelimitedFromStream(stream)

  val NAME_FIELD_NUMBER = 1
  val CONTENT_FIELD_NUMBER = 2

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbYokozunaSchema) = defaultInstance.mergeFrom(prototype)

}
final case class RpbYokozunaSchemaPutReq(
  `schema`: RpbYokozunaSchema = RpbYokozunaSchema.defaultInstance) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbYokozunaSchemaPutReq]
    with net.sandrogrzicic.scalabuff.Parser[RpbYokozunaSchemaPutReq] {

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeMessage(1, `schema`)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    __size += computeMessageSize(1, `schema`)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbYokozunaSchemaPutReq = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    var __schema: RpbYokozunaSchema = RpbYokozunaSchema.defaultInstance

      def __newMerged = RpbYokozunaSchemaPutReq(
        __schema)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __schema = readMessage[RpbYokozunaSchema](in, __schema, _emptyRegistry)
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbYokozunaSchemaPutReq) = {
    RpbYokozunaSchemaPutReq(
      m.`schema`)
  }

  def getDefaultInstanceForType = RpbYokozunaSchemaPutReq.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbYokozunaSchemaPutReq {
  @beans.BeanProperty val defaultInstance = new RpbYokozunaSchemaPutReq()

  def parseFrom(data: Array[Byte]): RpbYokozunaSchemaPutReq = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbYokozunaSchemaPutReq = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbYokozunaSchemaPutReq = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbYokozunaSchemaPutReq = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbYokozunaSchemaPutReq] = defaultInstance.mergeDelimitedFromStream(stream)

  val SCHEMA_FIELD_NUMBER = 1

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbYokozunaSchemaPutReq) = defaultInstance.mergeFrom(prototype)

}
final case class RpbYokozunaSchemaGetReq(
  `name`: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbYokozunaSchemaGetReq]
    with net.sandrogrzicic.scalabuff.Parser[RpbYokozunaSchemaGetReq] {

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeBytes(1, `name`)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    __size += computeBytesSize(1, `name`)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbYokozunaSchemaGetReq = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    var __name: com.google.protobuf.ByteString = com.google.protobuf.ByteString.EMPTY

      def __newMerged = RpbYokozunaSchemaGetReq(
        __name)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __name = in.readBytes()
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbYokozunaSchemaGetReq) = {
    RpbYokozunaSchemaGetReq(
      m.`name`)
  }

  def getDefaultInstanceForType = RpbYokozunaSchemaGetReq.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbYokozunaSchemaGetReq {
  @beans.BeanProperty val defaultInstance = new RpbYokozunaSchemaGetReq()

  def parseFrom(data: Array[Byte]): RpbYokozunaSchemaGetReq = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbYokozunaSchemaGetReq = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbYokozunaSchemaGetReq = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbYokozunaSchemaGetReq = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbYokozunaSchemaGetReq] = defaultInstance.mergeDelimitedFromStream(stream)

  val NAME_FIELD_NUMBER = 1

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbYokozunaSchemaGetReq) = defaultInstance.mergeFrom(prototype)

}
final case class RpbYokozunaSchemaGetResp(
  `schema`: RpbYokozunaSchema = RpbYokozunaSchema.defaultInstance) extends com.google.protobuf.GeneratedMessageLite
    with com.google.protobuf.MessageLite.Builder
    with net.sandrogrzicic.scalabuff.Message[RpbYokozunaSchemaGetResp]
    with net.sandrogrzicic.scalabuff.Parser[RpbYokozunaSchemaGetResp] {

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeMessage(1, `schema`)
  }

  def getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var __size = 0
    __size += computeMessageSize(1, `schema`)

    __size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): RpbYokozunaSchemaGetResp = {
    import com.google.protobuf.ExtensionRegistryLite.{ getEmptyRegistry ⇒ _emptyRegistry }
    var __schema: RpbYokozunaSchema = RpbYokozunaSchema.defaultInstance

      def __newMerged = RpbYokozunaSchemaGetResp(
        __schema)
    while (true) in.readTag match {
      case 0       ⇒ return __newMerged
      case 10      ⇒ __schema = readMessage[RpbYokozunaSchema](in, __schema, _emptyRegistry)
      case default ⇒ if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: RpbYokozunaSchemaGetResp) = {
    RpbYokozunaSchemaGetResp(
      m.`schema`)
  }

  def getDefaultInstanceForType = RpbYokozunaSchemaGetResp.defaultInstance
  def clear = getDefaultInstanceForType
  def isInitialized = true
  def build = this
  def buildPartial = this
  def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
  override def getParserForType = this
  def newBuilderForType = getDefaultInstanceForType
  def toBuilder = this
  def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object RpbYokozunaSchemaGetResp {
  @beans.BeanProperty val defaultInstance = new RpbYokozunaSchemaGetResp()

  def parseFrom(data: Array[Byte]): RpbYokozunaSchemaGetResp = defaultInstance.mergeFrom(data)
  def parseFrom(data: Array[Byte], offset: Int, length: Int): RpbYokozunaSchemaGetResp = defaultInstance.mergeFrom(data, offset, length)
  def parseFrom(byteString: com.google.protobuf.ByteString): RpbYokozunaSchemaGetResp = defaultInstance.mergeFrom(byteString)
  def parseFrom(stream: java.io.InputStream): RpbYokozunaSchemaGetResp = defaultInstance.mergeFrom(stream)
  def parseDelimitedFrom(stream: java.io.InputStream): Option[RpbYokozunaSchemaGetResp] = defaultInstance.mergeDelimitedFromStream(stream)

  val SCHEMA_FIELD_NUMBER = 1

  def newBuilder = defaultInstance.newBuilderForType
  def newBuilder(prototype: RpbYokozunaSchemaGetResp) = defaultInstance.mergeFrom(prototype)

}

object RiakYokozunaPB {
  def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
  }

}
